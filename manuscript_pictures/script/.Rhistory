### embedding
larry_emb <- read.csv("F:/CJP_cellfate/result/cell_fate_pred/larry_emb.csv",
header=T,row.names = 1)
monocyte_pseu <- read.delim("F:/CJP_cellfate/monocyte_pseu.txt")
View(monocyte_pseu)
monocyte_pseu=monocyte_pseu[order(monocyte_pseu$order),]
larry_emb$pred = monocyte_pseu$predict2000
larry_emb$label[larry_emb$label=='Monocyte'] = 'other'
larry_emb$label[larry_emb$label=='Neutrophil'] = 'other'
a1 = larry_emb[larry_emb$label!='ohter',]
View(a1)
a1 = larry_emb[larry_emb$label!='ohter',]
larry_emb$pred[larry_emb$label=='ohter']
larry_emb$pred[larry_emb$label=='ohter']='ohter'
View(larry_emb)
larry_emb$label=='ohter'
larry_emb$pred[larry_emb$label=='other']='ohter'
a1=larry_emb[larry_emb$label!='other',]
summary(a1[,3]==a1[,4])
2538/(2538+856)
View(larry_emb)
View(monocyte_pseu)
larry_emb$pred=monocyte_pseu$predict1500
larry_emb$pred[larry_emb$label=='other']='ohter'
a1=larry_emb[larry_emb$label!='other',]
summary(a1[,3]==a1[,4])
#devtools::install_github("jiang-junyao/FateMapper")
#devtools::install_github("caleblareau/BuenColors")
#setwd('F:\\scLT-seq db\\script')
library(FateMapper)
library(BuenColors)
library(ggplot2)
### load data
col<- rev(colorRampPalette(c("#cc0000", "#FFff00",'#66ccff','#000066'))(50))
save_dir = 'F:\\scLT-seq db\\out_result/'
obj_metadata_list = readRDS('..\\metadata_rds/obj_metadata_list.rds')
for (i in 1:length(obj_metadata_list)) {
dataset_name = names(obj_metadata_list)[i]
metadata = obj_metadata_list[[i]]
colnames(metadata)[1:2] = c('UMAP_1','UMAP_2')
### UMAP
png(filename = paste0(save_dir,'dataset_umap/',dataset_name,'.png'),
width = 1200,height = 1000,res = 200)
ggplot(metadata,aes(x=UMAP_1,y=UMAP_2,color=celltype))+geom_point()+
theme_void()+scale_color_manual(values = jdb_palette("corona"))
dev.off()
### clone analysis
cell_fate = metadata[,c('barcodes','celltype')]
cell_fate = cell_fate[cell_fate$barcodes!='',]
cell_fate = cell_fate[!is.na(cell_fate$barcodes),]
barcode_freq = fate_mapping(cell_fate,show_row = F,border_color=NA,
cluster_rows = T)
png(filename = paste0(save_dir,'clone_expression_fig/',dataset_name,'.png'),
width = 1200,height = 1000,res = 200)
print(pheatmap::pheatmap(log10(barcode_freq+0.0001),show_rownames =F,color = col
,cluster_rows = T,cluster_cols = T,border_color=NA))
dev.off()
write.table(barcode_freq,paste0(save_dir,'clone_expression_table/',
dataset_name,'.txt'),quote = F,sep = '\t')
### cell type similarity
png(filename = paste0(save_dir,'cell_type_similarity/',dataset_name,'.png'),
width = 1200,height = 1000,res = 200)
print(cell_type_fate_similartiy(cell_fate))
dev.off()
### clone fate bias
dir.create(paste0(save_dir,'clone_fate_bias/',dataset_name))
bias_list = list()
for (j in unique(cell_fate[,2])) {
ct_fate_bias = clone_fate_bias(cell_fate,j)
bias_list[[j]] = ct_fate_bias
write.table(ct_fate_bias,paste0(save_dir,'clone_fate_bias/',
dataset_name,'/',j,'.txt'),quote = F,
row.names = F,sep = '\t')
}
}
save_dir = 'F:\\scLT-seq db\\out_result/'
obj_metadata_list = readRDS('..\\metadata_rds/obj_metadata_list.rds')
obj_metadata_list <- readRDS("F:/scLT-seq db/metadata_rds/obj_metadata_list.rds")
for (i in 1:length(obj_metadata_list)) {
dataset_name = names(obj_metadata_list)[i]
metadata = obj_metadata_list[[i]]
colnames(metadata)[1:2] = c('UMAP_1','UMAP_2')
### UMAP
png(filename = paste0(save_dir,'dataset_umap/',dataset_name,'.png'),
width = 1200,height = 1000,res = 200)
ggplot(metadata,aes(x=UMAP_1,y=UMAP_2,color=celltype))+geom_point()+
theme_void()+scale_color_manual(values = jdb_palette("corona"))
dev.off()
### clone analysis
cell_fate = metadata[,c('barcodes','celltype')]
cell_fate = cell_fate[cell_fate$barcodes!='',]
cell_fate = cell_fate[!is.na(cell_fate$barcodes),]
barcode_freq = fate_mapping(cell_fate,show_row = F,border_color=NA,
cluster_rows = T)
png(filename = paste0(save_dir,'clone_expression_fig/',dataset_name,'.png'),
width = 1200,height = 1000,res = 200)
print(pheatmap::pheatmap(log10(barcode_freq+0.0001),show_rownames =F,color = col
,cluster_rows = T,cluster_cols = T,border_color=NA))
dev.off()
write.table(barcode_freq,paste0(save_dir,'clone_expression_table/',
dataset_name,'.txt'),quote = F,sep = '\t')
### cell type similarity
png(filename = paste0(save_dir,'cell_type_similarity/',dataset_name,'.png'),
width = 1200,height = 1000,res = 200)
print(cell_type_fate_similartiy(cell_fate))
dev.off()
### clone fate bias
dir.create(paste0(save_dir,'clone_fate_bias/',dataset_name))
bias_list = list()
for (j in unique(cell_fate[,2])) {
ct_fate_bias = clone_fate_bias(cell_fate,j)
bias_list[[j]] = ct_fate_bias
write.table(ct_fate_bias,paste0(save_dir,'clone_fate_bias/',
dataset_name,'/',j,'.txt'),quote = F,
row.names = F,sep = '\t')
}
}
#devtools::install_github("jiang-junyao/FateMapper")
#devtools::install_github("caleblareau/BuenColors")
#setwd('F:\\scLT-seq db\\script')
library(FateMapper)
library(BuenColors)
library(ggplot2)
for (i in 1:length(obj_metadata_list)) {
dataset_name = names(obj_metadata_list)[i]
metadata = obj_metadata_list[[i]]
colnames(metadata)[1:2] = c('UMAP_1','UMAP_2')
### UMAP
png(filename = paste0(save_dir,'dataset_umap/',dataset_name,'.png'),
width = 1200,height = 1000,res = 200)
ggplot(metadata,aes(x=UMAP_1,y=UMAP_2,color=celltype))+geom_point()+
theme_void()+scale_color_manual(values = jdb_palette("corona"))
dev.off()
### clone analysis
cell_fate = metadata[,c('barcodes','celltype')]
cell_fate = cell_fate[cell_fate$barcodes!='',]
cell_fate = cell_fate[!is.na(cell_fate$barcodes),]
barcode_freq = fate_mapping(cell_fate,show_row = F,border_color=NA,
cluster_rows = T)
png(filename = paste0(save_dir,'clone_expression_fig/',dataset_name,'.png'),
width = 1200,height = 1000,res = 200)
print(pheatmap::pheatmap(log10(barcode_freq+0.0001),show_rownames =F,color = col
,cluster_rows = T,cluster_cols = T,border_color=NA))
dev.off()
write.table(barcode_freq,paste0(save_dir,'clone_expression_table/',
dataset_name,'.txt'),quote = F,sep = '\t')
### cell type similarity
png(filename = paste0(save_dir,'cell_type_similarity/',dataset_name,'.png'),
width = 1200,height = 1000,res = 200)
print(cell_type_fate_similartiy(cell_fate))
dev.off()
### clone fate bias
dir.create(paste0(save_dir,'clone_fate_bias/',dataset_name))
bias_list = list()
for (j in unique(cell_fate[,2])) {
ct_fate_bias = clone_fate_bias(cell_fate,j)
bias_list[[j]] = ct_fate_bias
write.table(ct_fate_bias,paste0(save_dir,'clone_fate_bias/',
dataset_name,'/',j,'.txt'),quote = F,
row.names = F,sep = '\t')
}
}
detach("package:FateMapper", unload = TRUE)
#devtools::install_github("jiang-junyao/FateMapper")
#devtools::install_github("caleblareau/BuenColors")
#setwd('F:\\scLT-seq db\\script')
library(FateMapper)
for (i in 1:length(obj_metadata_list)) {
dataset_name = names(obj_metadata_list)[i]
metadata = obj_metadata_list[[i]]
colnames(metadata)[1:2] = c('UMAP_1','UMAP_2')
### UMAP
png(filename = paste0(save_dir,'dataset_umap/',dataset_name,'.png'),
width = 1200,height = 1000,res = 200)
ggplot(metadata,aes(x=UMAP_1,y=UMAP_2,color=celltype))+geom_point()+
theme_void()+scale_color_manual(values = jdb_palette("corona"))
dev.off()
### clone analysis
cell_fate = metadata[,c('barcodes','celltype')]
cell_fate = cell_fate[cell_fate$barcodes!='',]
cell_fate = cell_fate[!is.na(cell_fate$barcodes),]
barcode_freq = fate_mapping(cell_fate,show_row = F,border_color=NA,
cluster_rows = T)
png(filename = paste0(save_dir,'clone_expression_fig/',dataset_name,'.png'),
width = 1200,height = 1000,res = 200)
print(pheatmap::pheatmap(log10(barcode_freq+0.0001),show_rownames =F,color = col
,cluster_rows = T,cluster_cols = T,border_color=NA))
dev.off()
write.table(barcode_freq,paste0(save_dir,'clone_expression_table/',
dataset_name,'.txt'),quote = F,sep = '\t')
### cell type similarity
png(filename = paste0(save_dir,'cell_type_similarity/',dataset_name,'.png'),
width = 1200,height = 1000,res = 200)
print(cell_type_fate_similartiy(cell_fate))
dev.off()
### clone fate bias
dir.create(paste0(save_dir,'clone_fate_bias/',dataset_name))
bias_list = list()
for (j in unique(cell_fate[,2])) {
ct_fate_bias = clone_fate_bias(cell_fate,j)
bias_list[[j]] = ct_fate_bias
write.table(ct_fate_bias,paste0(save_dir,'clone_fate_bias/',
dataset_name,'/',j,'.txt'),quote = F,
row.names = F,sep = '\t')
}
}
for (i in 1:length(obj_metadata_list)) {
dataset_name = names(obj_metadata_list)[i]
metadata = obj_metadata_list[[i]]
colnames(metadata)[1:2] = c('UMAP_1','UMAP_2')
### UMAP
png(filename = paste0(save_dir,'dataset_umap/',dataset_name,'.png'),
width = 1200,height = 1000,res = 200)
print(ggplot(metadata,aes(x=UMAP_1,y=UMAP_2,color=celltype))+geom_point()+
theme_void()+scale_color_manual(values = jdb_palette("corona")))
dev.off()
### clone analysis
cell_fate = metadata[,c('barcodes','celltype')]
cell_fate = cell_fate[cell_fate$barcodes!='',]
cell_fate = cell_fate[!is.na(cell_fate$barcodes),]
barcode_freq = fate_mapping(cell_fate,show_row = F,border_color=NA,
cluster_rows = T)
png(filename = paste0(save_dir,'clone_expression_fig/',dataset_name,'.png'),
width = 1200,height = 1000,res = 200)
print(pheatmap::pheatmap(log10(barcode_freq+0.0001),show_rownames =F,color = col
,cluster_rows = T,cluster_cols = T,border_color=NA))
dev.off()
write.table(barcode_freq,paste0(save_dir,'clone_expression_table/',
dataset_name,'.txt'),quote = F,sep = '\t')
### cell type similarity
png(filename = paste0(save_dir,'cell_type_similarity/',dataset_name,'.png'),
width = 1200,height = 1000,res = 200)
print(cell_type_fate_similartiy(cell_fate))
dev.off()
### clone fate bias
dir.create(paste0(save_dir,'clone_fate_bias/',dataset_name))
bias_list = list()
for (j in unique(cell_fate[,2])) {
ct_fate_bias = clone_fate_bias(cell_fate,j)
bias_list[[j]] = ct_fate_bias
write.table(ct_fate_bias,paste0(save_dir,'clone_fate_bias/',
dataset_name,'/',j,'.txt'),quote = F,
row.names = F,sep = '\t')
}
}
